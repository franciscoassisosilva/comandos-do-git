-- Uma branch é uma linha independente de desenvolvimento em que podemos comitar novas versões do código sem afetar outras branches.

-- Para listar as branches do nosso repositório, devemos executar o comando:
git branch

-- Git possui por padrão uma branch principal chamada master.
-- Observe que a branch master tem um asterisco (*) na frente. Isso indica que é a branch atual, em que estamos trabalhando.

-- No Git, toda branch é basicamente um apontador para um commit. Acada novo commit que fazemos, a branch é movida automaticamente, passando a apontar para esse novo commit. Por isso, por padrão, a branch master aponta para o último commit que fizemos.

-- Se quisermos listar as branches existentes no nosso repositório com os commits associados, poderíamos utilizar a opção -v do comando git branch :
git branch -v

-- Antes de continuarmos, é importante sabermos uma das informações que um commit armazena, o commit pai, que é o que foi efetuado anteriormente. Na verdade, um commit pode ter vários pais, o que veremos adiante.
-- Podemos observar os commits com seus respectivos pais executando o comando git log com a opção (--parents) . Já para verificarmos o commit para o qual a master está apontando,passamos a opção (--decorate) para o comando git log .
git log --oneline --decorate --parents


-- Observe que a resposta do comando anterior apresenta três colunas: o código do commit, o código do pai e a mensagem do commit. Por exemplo, podemos ver que o pai do commit d211fac (“Renomeando CSS”) foi o commit 515da0a (“Removendo página de produtos”).

-- Criando um branch
-- O comando git branch apenas cria uma nova branch, mas não muda para a branch criada
git branch design

-- A nova branch que acabamos de criar ( design ) aponta para o mesmo commit que a branch que estávamos anteriormente ( master ). Podemos verificar isso com o comando:
git branch -v 

--HEAD -> Mas onde o Git guarda a informação de qual é a branch atual? Aí que entra o HEAD , que é um apontador especial que indica qual é a branch na qual estamos trabalhando.

-- Trocando de branch
git checkout design

-- Depois de executar o comando anterior, o HEAD passa a apontar para a
nova branch design . Se executarmos o comando git branch -v.

-- Observe que o asterisco (*) que indica a branch atual foi mudada para a branch design . Ambas as branches continuam apontando para o mesmo commit.

- criarmos e mudarmos para a nova branch loja de uma só vez. Podemos fazer isso passando a opção -b para o comando git checkout :
git checkout -b loja

-- Deletando uma branch
-- Para deletar uma branch, devemos utilizar a opção -d do comando git branch :
git branch -d loja

-- obs: Não é possível remover uma branch enquanto estivermos nela. Por isso, devemos ir para outra branch. Para ir para a branch master , devemos executar git checkout master.

--obs: Não é possível deletar com a opção -d uma branch que possui commits ainda não aplicados em outras branches (veremos como mesclar branches mais adiante).
Para removermos a branch loja se tivermos feito algum commit, devemos utilizar a opção -D :
git branch -D loja


-- Mesclando alterações
-- Verificando branches ainda não mescladas
-- Considerando que estamos na branch master , podemos verificar as branches ainda não mescladas com a opção --no-merged do comando git branch:
git branch --no-merged

--obs: Isso indica que há mudanças ainda não mescladas na branch design.

-- O comando git branch também tem a opção --merged . Se executássemos 
git branch --merged

-- resposta: master

-- Mesclando alterações com merge
-- Para juntarmos todas as alterações que fizemos na branch design com as da branch master , mesclando as duas, podemos utilizar o comando:
git merge design -m "Mesclando com a branch design"

-- obs: 
Há uma situação em que um git merge não irá gerar um commit de merge: quando a branch de destino não teve nenhum commit a mais desde que a branch a ser mesclada foi criada.
-- No nosso caso, se não tivéssemos feito o commit 2223859 (Alterando textos do banner) na branch master , o merge com a branch design seria basicamente apontar a master para onde a design aponta: o commit 8f53065 (Adicionando Bootstrap).
-- Esse tipo de merge é chamado de fast-forward.
-- É possível evitar o uso de fast-forward, forçando a criação de um commit de merge, utilizando a opção --no-ff do comando git merge .

-- Mesclando alterações com rebase
-- Facilita tarefas de revisão de codigo
-- Há uma maneira alternativa de mesclar as alterações de duas branches que simplifica o histórico do projeto. Considerando que estamos na branch master , em vez de utilizar git merge , é possível utilizar:
git rebase design

--obs: 
-- No caso de um fast-forward basta apontar a branch de destino para o commit mais novo da branch sendo mesclada. No nosso caso, se não tivéssemos nenhum novo commit na branch master , a mesclagem seria feita apontando a master para o mesmo commit para o qual a design aponta. Dessa forma, o rebase não precisaria reescrever o histórico de commits.
-- Por isso, o git merge e o git rebase têm o mesmo efeito quando há um fast-forward.

-- Mantendo o histórico da master intacto após um rebase
-- Primeiramente, teríamos que passar para a branch design com o comando 
git checkout design
-- Poderíamos ter feito a integração das branches master e design com rebase de maneira a deixar master intacta se tivéssemos feito nosso trabalho de uma maneira ligeiramente diferente.
-- Primeiramente, teríamos que passar para a branch design com o comando git checkout design .
-- Então, faríamos o rebase da branch master na design com o comando
git rebase master .

-- Com a base da branch design refeita, é possível fazer um merge do tipo fast-forward da design na branch master . Para tal, deveríamos ir para a master executando git checkout master.
-- Para tal, deveríamos ir para a master executando:
git checkout master


-- Branches Remotas
-- Podemos listar as branches remotas passando a opção -r para o comando git branch:
git branch -r

-- Se quisermos mostrar tanto as branches locais como as remotas, podemos utilizar o comando:
git branch -a

-- Para vermos para quais commits as branches remotas estão apontando
git branch -r -v

-- Compartilhando branches
git push origin design

-- Com o comando anterior, fizemos um git checkout de uma nova branch local chamada design a partir da branch remota origin/design . 
-- Agora estamos prontos para trabalhar no design da aplicação, se quisermos.
git checkout -b design origin/design

-- Branches locais criadas a partir de branches remotas são chamadas de tracking branches.

-- Uma outra maneira, mais sucinta, de criar uma tracking branch é utilizar a opção -t do comando git checkout. No nosso caso, faríamos:
git checkout -t origin/design .

-- Seria criada localmente a tracking branch design relacionada com a branch remota origin/design.

--  Então, para enviar as alterações na branch master para o repositório remoto, devemos fazer:
git push origin master

-- Trazendo commits de um repositório remoto com fetch 
-- Para obtermos os commits da branch remota origin/master no nosso repositório outro , podemos executar o comando:
git fetch origin

-- Mesclando branches remotas e locais com rebase
A alternativa ao merge seria um rebase da branch origin/master na branch master . Para isso, devemos executar:
git rebase origin/master

--obs:  Utilizar um git pull --rebase para obter mudanças remotas. É uma prática segura porque nossos novos commits locais ainda não foram compartilhados, ou seja, outros membros nem sabem da existência desses commits. Por isso, alterá-los não traz grandes problemas.

-- Uma discussão detalhada
https://blog.sourcetreeapp.com/2012/08/21/merge-or-rebase/




